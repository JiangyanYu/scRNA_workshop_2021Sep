---
title: "scRNA workshop 2021 Sep"
author: "Jiangyan Yu (jiangyan.yu@uni-bonn.de)"
date: "'r Sys.Date()'"
output: 
  html_document:
    code_folding: hide
    number_sections: yes
    theme: united
    toc: yes
    toc_float: yes
  pdf_document:
    toc: yes
---

# preparation work

```{r global_options}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
```


## load scRNA data into docker

1. Download toy data from here: https://cf.10xgenomics.com/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz

2. Upload the data into rstudio
 barcodes.tsv
 genes.tsv
 matrix.mtx
 
```{r}
# make a new folder for data
# dir.create(path = "/home/jyu/scRNA/data")

# upload scRNA files into "/home/jyu/scRNA/data"
```

## library

```{r}
library(Seurat)
library(dplyr)
library(magrittr)
library(ggplot2)
```

## working directory

```{r}
counts_dir = "/home/jyu/scRNA/data"
working_dir = "/home/jyu/scRNA"
```

# QC

## load PBMC data into seurat 

```{r}
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = counts_dir)

# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, 
                           project = "scRNA_workshop_2021Sep", 
                           min.cells = 3, 
                           min.features = 200)

# seurat object
pbmc

# check pbmc in Environment on the right sidebar
```

## quality parameters

```{r}
# mt percent
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")

# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)+theme(legend.position = "none")

# Visualize QC matrics on scatterplot
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")+theme(legend.position = "none")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")+theme(legend.position = "none")
plot1 + plot2


```

## filtering {.tabset .tabset-fade}

### mt% 

```{r}
plot1 + 
  geom_hline(yintercept = 5) + 
  geom_text(x=10000, y=7, label = "mt%>5%: dead cells")
```

### nFeature_RNA

```{r}
plot2+ 
  geom_hline(yintercept = 2500) + 
  geom_text(x=10000, y=2700, label = "Doublets") +
  geom_hline(yintercept = 200) + 
  geom_text(x=10000, y=100, label = "Low quality cells")
  
```

## remove unwanted cells

```{r}
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
```

# normalization and scaling

preparation for PCA and umap

## normalization

```{r}
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)

## only focus on highly variable features
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)

# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
# plot1 + plot2
plot2
```

## scaling

```{r}
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
```

# PCA

```{r}
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
```

## determine dimensions

3 alternative approaches
1) PCA heatmap
2) JackStraw plot
3) Elbowplot

```{r}
# NOTE: This process can take a long time for big datasets, comment out for expediency. More
# approximate techniques such as those implemented in ElbowPlot() can be used to reduce
# computation time
pbmc <- JackStraw(pbmc, num.replicate = 100)
pbmc <- ScoreJackStraw(pbmc, dims = 1:20)

# select low PC values
JackStrawPlot(pbmc, dims = 1:15)

# select PCs at the elbow
ElbowPlot(pbmc)

```

# cluster cells

use selected dimensions for following analysis

```{r}
pbmc <- FindNeighbors(pbmc, dims = 1:10)
## you can play with resolution parameter to get different number of clusters
pbmc <- FindClusters(pbmc, resolution = 0.5)
```

## test the resolution

```{r}

plot_list=list()
for (i in seq(1,10)/10) {
  tmp = FindClusters(pbmc, resolution = i)
  tmp = RunUMAP(tmp, dims = 1:10,min.dist = 1e-30,spread = 1)
  plot_list[[i*10]]= DimPlot(tmp, reduction = "umap")
}
plot_list1 = list()
for (i in 1:10) {
 p = plot_list[[i]] +
   labs(title=paste0("Resolution=0.",i))+
   theme_classic()+
   theme(legend.position = "none")
 plot_list1 [[i]] = p
}
cowplot::plot_grid(plotlist = plot_list1, ncol = 4)
rm(tmp,plot_list,plot_list1,p,i)
```



# UMAP

use the same dimension as used in the last step
min.dist and spread parameters can be used to regulate umap structure

```{r}
## 
pbmc <- RunUMAP(pbmc, dims = 1:10)
DimPlot(pbmc, reduction = "umap", label = TRUE)
```

# objects stored in the seurat subject

## meta data

you can add more information into meta data, such as sample type, disease type, batch

```{r}
pbmc@meta.data %>% head()
pbmc@meta.data$sample = sample(c("sp1","sp2"),c(nrow(pbmc@meta.data)), replace = TRUE)
DimPlot(pbmc,group.by = "sample")
```

## batch effect

be careful to define batch effect. sometimes it is not batch effect, but true biology behind.

```{r}
# tmp_img = imager::load.image(file = paste0(working_dir,"/00002a.png"))
# plot(tmp_img)
```

# DEG

```{r}
# find markers for every cluster compared to all remaining cells, report only the positive
# ones
pbmc.markers <- FindAllMarkers(pbmc, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
pbmc.markers %>%
    group_by(cluster) %>%
    slice_max(n = 2, order_by = avg_log2FC)
```

## different ways to visualize DEGs {.tabset .tabset-fade}

### violin plot

```{r}
VlnPlot(pbmc, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP",
    "CD8A"))
```


### feature plot

```{r}
FeaturePlot(pbmc, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP",
    "CD8A"))
```

### heatmap

```{r}
pbmc.markers %>%
    group_by(cluster) %>%
    top_n(n = 10, wt = avg_log2FC) -> top10
DoHeatmap(pbmc, features = top10$gene) + NoLegend()
```

# cluster annotation

```{r}
new.cluster.ids <- c("Naive CD4 T", "CD14+ Mono", "Memory CD4 T", "B", "CD8 T", "FCGR3A+ Mono",
    "NK", "DC", "Platelet")
names(new.cluster.ids) <- levels(pbmc)
pbmc <- RenameIdents(pbmc, new.cluster.ids)
DimPlot(pbmc, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()
```

# save seurat objecr or rdata

```{r}
saveRDS(pbmc, file = paste0(working_dir, "pbmc3k_final.rds"))
```

# cell-cell interaction

nichenetr

customer wrapped function for nichenetr as an example if there is enough time left (1.5h)

```{r}
# devtools::install_github("saeyslab/nichenetr")
library(nichenetr)
```

# pseudotime analysis

monocle3

```{r}
# devtools::install_github("cole-trapnell-lab/monocle-release", ref="monocle3_alpha")
library(monocle3)
```


# session information

```{r}
sessionInfo()
```

